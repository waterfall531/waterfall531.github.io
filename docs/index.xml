<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Randy&#39;s Blog</title>
    <link>https://waterfall531.github.io/</link>
    <description>Recent content on Randy&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Mon, 07 Dec 2020 17:35:25 +0800</lastBuildDate>
    
	<atom:link href="https://waterfall531.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leetcode 1603</title>
      <link>https://waterfall531.github.io/posts/leetcode-1603/</link>
      <pubDate>Mon, 07 Dec 2020 17:35:25 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1603/</guid>
      <description>Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.
 Implement the ParkingSystem class:
 ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor. bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot.</description>
    </item>
    
    <item>
      <title>Leetcode 1672.Richest Customer Wealth</title>
      <link>https://waterfall531.github.io/posts/leetcode-1672/</link>
      <pubDate>Mon, 07 Dec 2020 17:06:52 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1672/</guid>
      <description>You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.
A customer&amp;rsquo;s wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.
 v0 class Solution { /** * @param Integer[][] $accounts * @return Integer */ function maximumWealth($accounts) { $max = 0; foreach ($accounts as $list) { $tmpSum = array_sum($list); $max = $max &amp;gt; $tmpSum ?</description>
    </item>
    
    <item>
      <title>Leetcode 1221</title>
      <link>https://waterfall531.github.io/posts/leetcode-1221/</link>
      <pubDate>Fri, 11 Sep 2020 17:13:49 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1221/</guid>
      <description> Balanced strings are those who have equal quantity of &amp;lsquo;L&amp;rsquo; and &amp;lsquo;R&amp;rsquo; characters.
Given a balanced string s split it in the maximum amount of balanced strings.
Return the maximum amount of splitted balanced strings.
 Input: s = &amp;ldquo;RLRRLLRLRL&amp;rdquo;
Output: 4
Explanation: s can be split into &amp;ldquo;RL&amp;rdquo;, &amp;ldquo;RRLL&amp;rdquo;, &amp;ldquo;RL&amp;rdquo;, &amp;ldquo;RL&amp;rdquo;,each substring contains same number of &amp;lsquo;L&amp;rsquo; and &amp;lsquo;R&amp;rsquo;.
v0 class Solution { /** * @param String $s * @return Integer */ function balancedStringSplit($s) { $start = &amp;#39;&amp;#39;; $tmp = 0; $tmpCount = 0; for ($i = 0, $iMax = strlen($s); $i &amp;lt; $iMax; $i++) { if ($start === &amp;#39;&amp;#39;) { $start = $s[$i]; $tmpCount++; }else{ if ($s[$i] === $start) { $tmpCount++; } else { $tmpCount--; } } if ($tmpCount === 0) { $tmp++; $start = &amp;#39;&amp;#39;; } } return $tmp; } } </description>
    </item>
    
    <item>
      <title>Leetcode 1365</title>
      <link>https://waterfall531.github.io/posts/leetcode-1365/</link>
      <pubDate>Fri, 11 Sep 2020 17:13:49 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1365/</guid>
      <description>Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j&amp;rsquo;s such that j != i and nums[j] &amp;lt; nums[i].
Return the answer in an array.
 v0 class Solution { /** * @param Integer[] $nums * @return Integer[] */ function smallerNumbersThanCurrent($nums) { $sortArray = $nums; sort($sortArray); $resultC = []; foreach ($sortArray as $i =&amp;gt; $iValue) { $resultC[$iValue] = !</description>
    </item>
    
    <item>
      <title>Leetcode 1614</title>
      <link>https://waterfall531.github.io/posts/leetcode-1614/</link>
      <pubDate>Fri, 11 Sep 2020 17:13:49 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1614/</guid>
      <description>A string is a valid parentheses string (denoted VPS) if it meets one of the following:
  It is an empty string &amp;ldquo;&amp;rdquo;, or a single character not equal to &amp;ldquo;(&amp;rdquo; or &amp;ldquo;)&amp;rdquo;, It can be written as AB (A concatenated with B), where A and B are VPS&amp;rsquo;s, or It can be written as (A), where A is a VPS.   We can similarly define the nesting depth depth(S) of any VPS S as follows:</description>
    </item>
    
    <item>
      <title>Leetcode 1389</title>
      <link>https://waterfall531.github.io/posts/leetcode-1389/</link>
      <pubDate>Fri, 11 Sep 2020 16:51:59 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1389/</guid>
      <description>Given two arrays of integers nums and index. Your task is to create target array under the following rules:
  Initially target array is empty. From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array. Repeat the previous step until there are no elements to read in nums and index.   Return the target array.
  It is guaranteed that the insertion operations will be valid.</description>
    </item>
    
    <item>
      <title>Leetcode 1486. XOR Operation in an Array</title>
      <link>https://waterfall531.github.io/posts/leetcode-1486/</link>
      <pubDate>Mon, 07 Sep 2020 11:55:57 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1486/</guid>
      <description>Given an integer n and an integer start. Define an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length. Return the bitwise XOR of all elements of nums.
 v0 $tmpNum算出當下的n
再算$tmp
^ 是運算 xor
xor 是邏輯 xor
class Solution { /** * @param Integer $n * @param Integer $start * @return Integer */ function xorOperation($n, $start) { $tmp = $start; for($i = 1 ; $i &amp;lt; $n ; $i++){ $tmpNum = $start + 2 * $i; $tmp = $tmp ^ $tmpNum; } return $tmp; } } #v1</description>
    </item>
    
    <item>
      <title>Leetcode 1431</title>
      <link>https://waterfall531.github.io/posts/leetcode-1431.kids_with_the_greatest_number_of_candies/</link>
      <pubDate>Thu, 03 Sep 2020 17:30:44 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1431.kids_with_the_greatest_number_of_candies/</guid>
      <description>Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.
  For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.
 ##v0 test 1000 times with 0.28ms</description>
    </item>
    
    <item>
      <title>Leetcode 1528</title>
      <link>https://waterfall531.github.io/posts/leetcode-1528._shuffle_string/</link>
      <pubDate>Thu, 03 Sep 2020 17:00:16 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1528._shuffle_string/</guid>
      <description> Given a string s and an integer array indices of the same length.
  The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.
  Return the shuffled string.
 v1
class Solution { function restoreString($s, $indices) { $list = []; foreach ($indices as $index=&amp;gt;$item){ $list[$item] = $s[$index]; } ksort($list); return join(&amp;#39;&amp;#39;,$list); } } v2
class Solution { /** * @param String $s * @param Integer[] $indices * @return array */ function restoreString($s, $indices) { $list = &amp;#39;&amp;#39;; foreach ($indices as $index=&amp;gt;$item){ $list[$item] = $s[$index]; } return $list; } } </description>
    </item>
    
    <item>
      <title>Leetcode 1512. Number of Good Pairs</title>
      <link>https://waterfall531.github.io/posts/leetcode-1512.number_of_good_pairs/</link>
      <pubDate>Thu, 03 Sep 2020 16:56:51 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1512.number_of_good_pairs/</guid>
      <description> Given an array of integers nums.
  A pair (i,j) is called good if nums[i] == nums[j] and i &amp;lt; j.
  Return the number of good pairs.
 class Solution { /** * @param Integer[] $nums * @return Integer */ function numIdenticalPairs($nums) { $ans = 0; for($i = 0; $i &amp;lt; count($nums) - 1 ; $i++){ for($j = $i+1 ; $j &amp;lt; count($nums);$j++){ if ($nums[$i] === $nums[$j]){ $ans++; } } } return $ans; } } </description>
    </item>
    
    <item>
      <title>Leetcode 1470 Shuffle_the_Array</title>
      <link>https://waterfall531.github.io/posts/leetcode-1470-shuffle_the_array/</link>
      <pubDate>Tue, 01 Sep 2020 16:43:16 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1470-shuffle_the_array/</guid>
      <description>#1470. Shuffle the Array
 Given the array nums consisting of 2n elements in the form [x1,x2,&amp;hellip;,xn,y1,y2,&amp;hellip;,yn].
  Return the array in the form [x1,y1,x2,y2,&amp;hellip;,xn,yn].
 首先
 1 &amp;lt;= n &amp;lt;= 500
nums.length == 2n
1 &amp;lt;= nums[i] &amp;lt;= 10^3
 2n 一定等於長度
也就是說
可以藉由循序 先插入 &amp;lt; n 的 再處理 &amp;gt;= n的
class Solution { /** * @param Integer[] $nums * @param Integer $n * @return Integer[] */ function shuffle($nums, $n) { $list = []; foreach($nums as $index =&amp;gt; $num){ if ($index &amp;lt; $n){ $newIndex = $index * 2; }else{ $newIndex = ($index - $n) * 2 + 1; } $list[$newIndex] = $num; } ksort($list); return $list; } } 可這樣的做法問題在於 還要處理 array sort 又多花一點時間</description>
    </item>
    
    <item>
      <title>Leetcode 1480</title>
      <link>https://waterfall531.github.io/posts/leetcode-1480/</link>
      <pubDate>Tue, 01 Sep 2020 16:36:33 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/leetcode-1480/</guid>
      <description>#1480. Running Sum of 1d Array
 Given an array nums.
  We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).
  Return the running sum of nums.
 這是道簡單的題目 第一個想法是 foreach 就好 但要略過 index = 0 或是去判斷
判斷的所需秒數 12ms
` class Solution {
/** * @param Integer[] $nums * @return Integer[] */ function runningSum($nums) { $ans = []; foreach($nums as $index =&amp;gt; $num){ if($index === 0){ $ans[$index] = $num; }else{ $ans[$index] = $ans[$index - 1] + $num; } } return $ans; }  } `</description>
    </item>
    
    <item>
      <title>Mysql Alter Column</title>
      <link>https://waterfall531.github.io/posts/mysql-alter-column/</link>
      <pubDate>Tue, 18 Aug 2020 17:16:02 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/mysql-alter-column/</guid>
      <description>前情提要 1400w Rows的表 不停機情況下增加欄位
  mysql 5.6(含) 使用innoDb 可以線上改欄位格式 不鎖表
  若為 5.6以下(不含) 可考慮使用 pt-online-schema-change
  或考慮土法煉鋼
 複製表結構後產新表 移除key 複製資料 加key 停機 同步第二次 rename &amp;amp;&amp;amp; del oldTable    </description>
    </item>
    
    <item>
      <title>GitHub &#43; Hugo</title>
      <link>https://waterfall531.github.io/posts/hugo&#43;guthub/</link>
      <pubDate>Tue, 18 Aug 2020 16:31:11 +0800</pubDate>
      
      <guid>https://waterfall531.github.io/posts/hugo&#43;guthub/</guid>
      <description>setting github page change to /docs
add publishdir = &amp;lsquo;docs&amp;rsquo; to config.toml
then hugo -d output to docs and it can be push to git and also auto commit github page</description>
    </item>
    
  </channel>
</rss>